#!/usr/bin/env python3

import installer
import argparse
import sys
import art

class CLI:
    def __init__(self):
        self._craft_parser()
        self._parse_args()

    def _craft_parser(self):
        self._parser = argparse.ArgumentParser(
                prog = "dpcm",
                description = 'dotfiles personal package manager',
                epilog = "is this a Conte 2 reference?")

        self._parser.add_argument(
                '-l', '--list', default=False, action='store_true',
                help = "list names of packages in repository")

        self._parser.add_argument(
                '-s', '--search', action="store", type=str,
                help = "search package by name")

        self._parser.add_argument(
                '-i', '--install', action="store", type=str,
                nargs = "+", help = "install packages")
         
    def _parse_args(self):
        self._config = self._parser.parse_args(sys.argv[1:])

    def run(self):
        print(art.text2art("dpcm"),"\n")
        if self._config.list:
            repository = installer.src.context.Context.get_repository()
            print("packages found:", ', '.join(repository.get_package_names()))
        elif self._config.search:
            repository = installer.src.context.Context.get_repository()
            package_names = repository.get_package_names()
            for package_name in package_names:
                if self._config.search in package_name:
                    try:
                        package = repository.get_package(package_name)
                        metadata = package.get_metadata()
                        print(f"package:")
                        print(f"  metadata: |")
                        print(f"    name: {metadata.get_name()}")
                        print(f"    author: {metadata.get_author()}")
                        print(f"    date: {metadata.get_date()}")
                        print(f"    version: {metadata.get_version()}")
                        dependencies = package.get_dependencies()
                        print(f"  depends-on: ", str(dependencies.get_dependencies()))
                        print()
                    except installer.src.PackageNotFoundException:
                        print("error: couldn't find", self._config.search)
        elif self._config.install:
            repository = installer.src.context.Context.get_repository()
            try:
                repository.install_packages(self._config.install)
            except installer.src.PackageNotFoundException as err:
                print(err)
        else:
            print(f"done nothing")

if __name__ == "__main__":
    cli = CLI()
    cli.run()
